---
layout: post
title:  "HAL 9000: (Gradient)Descent into (March)Madness Part 1: Data Acquisition and Cleaning"
date:   2024-06-10 16:37:09 -0400
categories: [sports]
---
<p align="center">
  <img src="/assets/hal/halscreenshot.svg alt="Responsive SVG" style="max-width: 100%; height: auto;">
</p>

# Leveraging Python and Playwright to Unlock Insights from KenPom Basketball Data

## Introduction
As a data engineer, I'm constantly on the lookout for fascinating datasets that can provide valuable insights. One such dataset is the renowned KenPom college basketball ratings, which offer a comprehensive analysis of team performance and efficiency. In this article, we'll explore how to leverage Python and the Playwright automation library to scrape and analyze this data.

## Understanding the KenPom Dataset

The KenPom ratings include a wealth of metrics that we can categorize into several key areas:

### Core Performance Metrics
- Team ranking and rating
- Offensive and defensive efficiency
- Adjusted tempo
- Strength of schedule metrics

### Advanced Statistics
- Shooting percentages (3P%, 2P%, FT%)
- Turnover rates
- Rebound percentages
- Free throw rates

### Team Composition Data
- Player heights by position
- Team experience
- Bench metrics
- Team continuity

## Implementation

### Key Data Structure
First, let's look at how we define our key metrics:

```python
KENPOM_RATING = 'Rank'  # Team ranking based on overall performance
TEAM = 'Team'  # Name of the team
CONFERENCE = 'Conference'  # Name of the conference the team belongs to
RECORD = 'Record'  # Team's win-loss record
NET_RTG = 'NetRtg'  # Net rating, difference between offensive and defensive efficiency
ADJUSTED_OFFENSIVE_EFFICIENCY = 'AdjOE'  # Adjusted offensive efficiency rating
ADJUSTED_DEFENSIVE_EFFICIENCY = 'AdjDE'  # Adjusted defensive efficiency rating
ADJUSTED_TEMPO = 'AdjT'  # Adjusted tempo, the speed at which a team plays
```

### Table Definitions
We organize our data collection into distinct tables:

```python
INDEX_COLUMN_HEADERS = [
    KENPOM_RATING, TEAM, CONFERENCE, RECORD, NET_RTG, ADJUSTED_OFFENSIVE_EFFICIENCY, 
    ADJUSTED_OFFENSIVE_EFFICIENCY_RANK, ADJUSTED_DEFENSIVE_EFFICIENCY, 
    ADJUSTED_DEFENSIVE_EFFICIENCY_RANK, ADJUSTED_TEMPO, ADJUSTED_TEMPO_RANK,
    LUCK, LUCK_RANK, SOS_NET_RTG, SOS_NET_RTG_RANK, SOS_OFFENSIVE_EFFICIENCY, 
    SOS_OFFENSIVE_EFFICIENCY_RANK, SOS_DEFENSIVE_EFFICIENCY, SOS_DEFENSIVE_EFFICIENCY_RANK, 
    NCSOS_NET_RTG, NCSOS_NET_RTG_RANK
]

PAGE_INFO = {
    'https://kenpom.com/index.php': INDEX_COLUMN_HEADERS,
    'https://kenpom.com/summary.php': SUMMARY_COLUMN_HEADERS,
    'https://kenpom.com/stats.php': STATS_COLUMN_HEADERS,
    'https://kenpom.com/pointdist.php': POINTDIST_COLUMN_HEADERS,
    'https://kenpom.com/height.php': HEIGHT_COLUMN_HEADERS,
    'https://kenpom.com/teamstats.php': TEAMSTATS_COLUMN_HEADERS
}
```

### Core Extraction Functions

Here's how we extract the data using Playwright:

```python
def extract_table_rows(page):
    """Extract the table rows from the page."""
    return page.evaluate("""
        () => {
            return Array.from(document.querySelectorAll('#ratings-table tbody tr'))
                        .map(row => Array.from(row.querySelectorAll('td'))
                             .map(td => td.innerText.trim()));
        }
    """)

def is_current_season(season):
    now = pd.Timestamp.now()
    return season == now.year if now.month <= 5 else season - 1 == now.year

def scrape_kenpom_table(page, url, year):
    """Scrape the KenPom table from the page."""
    headers = PAGE_INFO[url]
    rows = extract_table_rows(page)

    # Check if the number of rows matches the number of columns
    if len(rows) > 0 and len(rows[0]) != len(headers):
        raise ValueError(f"Number of columns ({len(headers)}) does not match number of columns in data ({len(rows[0])})")

    # Create a DataFrame from the extracted data
    df = pd.DataFrame(rows, columns=headers)

    # Convert columns to appropriate data types
    if 'Kenpom_Rating' in df.columns:
        df['Kenpom_Rating'] = df['Kenpom_Rating'].astype(int)
    if 'Record' in df.columns:
        df[['Wins', 'Losses']] = df['Record'].str.split('-', expand=True)
        df = df.drop(columns='Record')

    for col in df.columns:
        if col.endswith('Rtg') or col.endswith('T'):
            df[col] = df[col].str.replace(',', '').astype(float)
        elif col.endswith('_Rank'):
            df[col] = df[col].str.extract(r'(\d+)', expand=False).astype(int)

    df['Team'] = df['Team'].str.replace(r'[\d*]', '', regex=True).str.strip().str.lower()
    df['Season'] = int(year)

    return df
```

### Main Data Collection Function

The main function that orchestrates the data collection:

```python
def fetch_kenpom_data(begin_season=2025, end_season=2025):
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        # Login to kenpom
        page.goto("https://kenpom.com/")
        page.fill("input[name='email']", 'your_email')
        page.fill("input[name='password']", "your_password")
        page.click("input[type='submit']")

        # Wait for navigation to complete
        page.wait_for_timeout(7000)

        seasonFrames = {}

        # Confirm login success and scrape data
        if "logout" in page.content():
            for season in range(begin_season, end_season + 1):
                frames = []
                for url in PAGE_INFO.keys():
                    page.goto(f"{url}?y={season}")
                    df = scrape_kenpom_table(page, url, season)
                    frames.append(df)

                merged_df = frames[0]
                for df in frames[1:]:
                    merged_df = pd.merge(merged_df, df, on=['Team', 'Season'], 
                                       how='outer', suffixes=('', '_drop'))
                merged_df = merged_df.loc[:, ~merged_df.columns.str.endswith('_drop')]

                if is_current_season(season):
                    merged_df['date_pulled'] = pd.Timestamp.now().strftime('%Y-%m-%d')
                    month_and_day = pd.Timestamp.now().strftime('%m%d')
                    seasonFrames.update({f"{season}_{month_and_day}": merged_df})
                else:
                    seasonFrames.update({f"{season}": merged_df})

        browser.close()
        return seasonFrames
```

## Running the Script

To execute the data collection:

```python
if __name__ == "__main__":
    seasonFrames = fetch_kenpom_data(begin_season=2025, end_season=2025)
    for key, value in seasonFrames.items():
        value.to_csv(f"kenpom_{key}.csv", index=False)
```

## Data Analysis Possibilities

With this data structure, you can perform various analyses:

1. **Performance Trends**: Track team efficiency metrics over time
2. **Conference Analysis**: Compare performance metrics across conferences
3. **Team Composition Impact**: Analyze how factors like experience and height affect performance
4. **Strength of Schedule Analysis**: Evaluate the impact of schedule difficulty on team performance

## Next Steps

Consider these potential enhancements to the analysis:

1. **Automated Updates**: Schedule regular data pulls to track changes over a season
2. **Advanced Analytics**: Develop predictive models using the collected metrics
3. **Data Visualization**: Create dashboards to visualize team and conference trends
4. **Historical Analysis**: Compare current season performance to historical benchmarks

## Conclusion

This implementation provides a robust foundation for analyzing college basketball performance using KenPom data. The modular design allows for easy maintenance and extension as analytical needs evolve. Remember to use the data responsibly and in accordance with KenPom's terms of service.

